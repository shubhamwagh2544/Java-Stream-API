##
What is stream ?

- Simply, an abstraction
- focuses on ALL instead on PARTS
- imperative to FUNCTIONAL programming (chaining together)
- used with Collections

##
How to use Stream

- Start with concrete implementation
    - arrays
    - sets
    - lists
    - maps
- call .stream() on the concrete type
- we can concatenate stream to one another to form chain
- this chain of stream is ABSTRACTION
- then we go back to concrete implementation again (like list, object, optional, string, int)

##
findAny() : Non Deterministic :- not necessarily returns same ans
findFirst() : Deterministic :- always returns same ans

##
The GROUP BY clause is used to group rows in a SQL query based on the values in one or more columns.
It's often used in conjunction with aggregate functions (SUM, COUNT, AVG, MAX, MIN) to summarize and analyze data.

Group By Use Cases :
1. Aggregating Data

    SELECT Product, Region, SUM(Revenue) AS TotalRevenue
    FROM Sales
    GROUP BY Product, Region;

2. Counting Occurrences

    SELECT Department, COUNT(*) AS EmployeeCount
    FROM Employees
    GROUP BY Department;

3. Finding Maximum or Minimum Values

    SELECT Department, MAX(Salary) AS MaxSalary
    FROM Employees
    GROUP BY Department;

4. Data Segmentation

    SELECT CASE
        WHEN Age < 30 THEN 'Under 30'
        WHEN Age < 60 THEN '30-59'
        ELSE '60 and Over'
    END AS AgeGroup, COUNT(*) AS CustomerCount
    FROM Customers
    GROUP BY AgeGroup;

5. Filtering Groups

    SELECT Product, SUM(Revenue) AS TotalRevenue
    FROM Sales
    GROUP BY Product
    HAVING TotalRevenue > 10000;

6. Eliminating Duplicate Data

    SELECT Email
    FROM Contacts
    GROUP BY Email;

##
FlatMap Uses :
1. Flattening Nested Collections
2. Transforming and Flattening Elements

##
Intermediate and Terminal operations :
1. Intermediate : Produces Stream
    - operations that transform one stream into another
    - lazy operations
        - don't execute entire stream immediately
        - only setup pipeline of operations to be performed
        - this pipeline is executed on demand and depending on terminal operation

    - ex. filtering, mapping, sorting, distincting, limiting

2. Terminal : Consume Stream
    - operations that produce a final result or a side effect
    - can have only one terminal operation (which closes stream)
    - collect, forEach, count, reduce, and toArray

##
In a stream pipeline, the order of intermediate operations matters.
Each intermediate operation is executed in the order they appear in the pipeline

ex. map -> limit : first map is executed to return new stream,
                   then limit is executed to limit stream result to 3 elements

##
Short Circuit Methods :
- are special intermediate and terminal operations that provide a way to optimize stream processing
- by allowing the stream to stop processing elements as soon as a certain condition is met
- improving performance

1. Intermediate Short-Circuit Operations
- limit
- distinct

2. Terminal Short-Circuit Operations
- anyMatch(Predicate<T> predicate)
- allMatch(Predicate<T> predicate)
- noneMatch(Predicate<T> predicate)
- findAny()
- findFirst()